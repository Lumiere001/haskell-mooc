-- | A Simple Sudoku Solver
--   27th September, 2007
--   In Chapter 05

-- 0. Basic data types

type Matrix a = [Row a]
type Row a    = [a]

type Grid     = Matrix Digit

{-
Matrix Digit
= [Row Digit]
= [[Digit]]
= [[Int]]
-}

type Digit    = Char

digits  :: [Digit]
digits  =  ['1'..'9']

blank   :: Digit -> Bool
blank   =  (== '0')

-- Q1. 다음 스도쿠 예시를 Grid 타입의 값으로 작성하시오.
--     빈칸은 '0'으로 표시하고, '1'~'9'로 칸을 채운다.
--                             [
--       _ _ 4 _ _ 5 7 _ _       ['0','0','4','0','0','5','7','0','0']
--       _ _ _ _ _ 9 4 _ _       [.....]
--       3 6 _ _ _ _ _ _ 8
--       7 2 _ _ 6 _ _ _ _
--       _ _ _ 4 _ 2 _ _ _
--       _ _ _ _ 8 _ _ 9 3
--       4 _ _ _ _ _ _ 5 6
--       _ _ 5 3 _ _ _ _ _
--       _ _ 6 1 _ _ 9 _ _ 
--                             ]
{-

   A1. 

-}

sudoku1 :: Grid   -- 초기에 주어진 것
sudoku1 =
    [ ['0','0','4','0','0','5','7','0','0']
    , ['0','0','0','0','0','9','4','0','0']
    , ['3','6','0','0','0','0','0','0','8']
    , ['7','2','0','0','6','0','0','0','0']
    , ['0','0','0','4','0','2','0','0','0']
    , ['0','0','0','0','8','0','0','9','3']
    , ['4','0','0','0','0','0','0','5','6']
    , ['0','0','5','3','0','0','0','0','0']
    , ['0','0','6','1','0','0','9','0','0']
    ]

sudoku2 :: Grid   -- 쉬움 난이도
sudoku2 = 
   [ ['0','7','0','4','0','5','6','0','0']
   , ['9','2','4','0','6','0','8','0','0']
   , ['1','0','5','0','0','8','7','0','0']
   , ['0','3','8','0','5','7','0','0','0']
   , ['0','0','0','0','0','0','0','7','3']
   , ['0','4','7','0','9','0','1','2','0']
   , ['4','0','9','6','0','2','0','0','1']
   , ['7','0','0','8','3','0','4','0','9']
   , ['0','1','0','5','4','9','0','0','0']
   ]

sudoku3 :: Grid   -- 마스터 난이도
sudoku3 = 
   [ ['8','0','6','0','5','0','7','0','9']
   , ['4','0','0','0','0','0','0','0','0']
   , ['0','0','0','2','0','0','5','0','0']
   , ['0','4','0','0','6','0','0','0','0']
   , ['6','0','7','1','0','0','0','8','0']
   , ['0','2','0','0','0','0','0','0','7']
   , ['0','0','0','0','0','3','0','1','0']
   , ['5','0','9','0','2','0','0','0','8']
   , ['0','7','0','0','0','0','0','0','0']
   ]

-- solve2로 풀었을 때 특별한 차이는 없었다. (학생 주석)

-- Q2. Grid 타입의 값을 입력받아 위의 스도쿠 예시와 같은 형태의 문자열을
--     출력하는 함수 display를 작성하시오.
--      (1) 빈칸은 밑줄(_)로 표시
--      (2) 각 칸 사이에 공백을 둔다.
--      (3) 한 줄에 9개의 빈칸 또는 숫자를 표시하고 줄바꿈 문자를 둔다.
--      (4) 총 9개 줄을 표시
--

{-

   A2. 아래 작성한 코드

-}

display :: Grid -> String
display = unlines . map (unwords . map replaceZero)
  where
    replaceZero '0' = "_"
    replaceZero d   = [d]


 
-- | 1. Specification

solve1 :: Grid -> [Grid]
solve1 = filter valid . expand . choices

type Choices = [Digit]

choices :: Grid -> Matrix Choices
choices = map (map choice)
 where choice d | blank d   = digits
                | otherwise = [d]

expand :: Matrix Choices -> [Grid]
expand = cp . map cp

cp :: [[a]] -> [[a]]
cp []       = [[]]
cp (xs:xss) = [x:ys | x <- xs, ys <- cp xss]

valid  :: Grid -> Bool
valid g = all nodups (rows g) &&
          all nodups (cols g) &&
          all nodups (boxs g)

nodups       :: Eq a => [a] -> Bool
nodups []     = True
nodups (x:xs) = x `notElem` xs && nodups xs

rows :: Matrix a -> [Row a]
rows = id

cols          :: Matrix a -> [Row a]
cols [xs]     = [[x] | x <- xs]
cols (xs:xss) = zipWith (:) xs (cols xss)

boxs :: Matrix a -> [Row a]
boxs = map ungroup . ungroup . map cols .
       group . map group

ungroup          = concat
group []         = []
group (x:y:z:xs) = [x,y,z]:group xs

-- Q3.  solve1 함수가 아래와 같이 작성되었다.
-- 
--      solve1 :: Grid -> [Grid]
--      solve1 = filter valid . expand . choices
--
-- Q3-1. choices의 타입은 무엇이며, choices sudoku1의 결과를 작성하시오.
{-

   A3-1. 

   choices :: Grid -> [[Choices]]

   *첫 번째 행*
   [['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['4']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['5'], ['7']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']]

   *두 번째 행*
   [['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['9'], ['4']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']]

   *세 번째 행*
   [['3']
   ,['6']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['8']]

   *네 번째 행*
   [['7']
   ,['2']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['6']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']]

   *다섯 번째 행*
   [['1', '2', '3', '4', '5', '6', '7', '8', '9']
    ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
    ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
    ,['4']
    ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
    ,['2']
    ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
    ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
    ,['1', '2', '3', '4', '5', '6', '7', '8', '9']]

   *여섯 번째 행*
   [['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['8']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['9']
   ,['3']]

   *일곱 번째 행*
   [['4']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['5']
   ,['6']]

   *여덟 번째 행*
   [['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['5']
   ,['3']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']]

   *아홉 번째 행*
   [['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['6']
   ,['1']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']]
-}

-- Q3-2. expand의 타입은 무엇이며, head . expand . choices $ sudoku1의 결과를 작성하시오.
{-

   A3-2. 

   expand :: [[[Digit]]] -> [[[Digit]]]

   경우의 수가 많기 때문에 위 문제에서 첫 번째 행을 예시로 설명해보겠다.
   우선 앞 과정에서 1~9 번째 행의 모든 결과가 리스트에 담겨서 받는다. 여기에서 편의성을 위해 가장 바깥에 있는 리스트는 제외했다.

   *첫 번째 행*
   [['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']  -> 2번 리스트
   ,['4']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['5'], ['7']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ,['1', '2', '3', '4', '5', '6', '7', '8', '9']]

   여기에서
   [['1', '1', '4', '1', '1', '5', '1', '1']
   ,['1', '2', '4', '1', '1', '5', '1', '1']    -> 2번 리스트 '2'만 바꿈
   ,['1', '3', '4', '1', '1', '5', '1', '1']    -> 2번 리스트 '3'만 바꿈
   , ....]

   이렇게 각 조합에 대한 새로운 그리드를 생성한다. 여기까지가 expand함수가 하는 역할이다.
   이후 만들어진 모든 경우의 수에 대해 head함수를 이용하여 경우의 수를 하나씩 하나씩 뽑아낸다.
-}

-- Q3-3. valide의 타입은 무엇이며, valid . head . expand . choices $ sudoku1의 결과를 작성하시오.
{-

   A3-3.

   valid :: [[Digit]] -> Bool
   
   head에서 뽑아낸 리스트가 스토쿠의 조건을 만족하는지 점검한다.

   각 행에 중복된 숫자가 없어야 하고, 각 열에 중복된 숫자가 없어야 하고, 각 3x3 서브그리드(박스)에 중복된 숫자가 없어야 한다.
   nodups 함수를 사용하여 각 행, 열, 서브그리드에 대해 중복된 요소가 없는지 확인한다.

-}


-- Q4. solve1은 수도쿠를 직관적으로 푸는 방법에 대한 명세로써
--     작성한 함수이다.
-- 
--     이 함수의 수도쿠 풀이 과정을 1단락 이내로 설명하시오.

{-

   A4. 

   choices 함수를 사용하여 각 셀에 대해 가능한 숫자들의 목록을 생성한다.
   그 후, expand 함수를 통해 가능한 숫자 조합들로부터 생성된 모든 가능한 그리드(완성된 수도쿠 보드)들의 리스트를 만든다.
   마지막으로, filter valid를 사용하여 이 그리드들 중에서 유효한 그리드들만을 선택한다.

-}

-- | 2. Pruning

prune :: Matrix Choices -> Matrix Choices
prune =
 pruneBy boxs . pruneBy cols . pruneBy rows
 where pruneBy f = f . map pruneRow . f

pruneRow :: Row Choices -> Row Choices
pruneRow row = map (remove ones) row
 where ones = [d | [d] <- row]

remove :: Choices -> Choices -> Choices
remove xs [d] = [d]
remove xs ds  = filter (`notElem` xs) ds

-- | 3. Single-cell expansion

expand1   :: Matrix Choices -> [Matrix Choices]
expand1 rows =
 [rows1 ++ [row1 ++ [c]:row2] ++ rows2 | c <- cs]
 where
 (rows1,row:rows2) = break (any smallest) rows
 (row1,cs:row2)    = break smallest row
 smallest cs       = length cs == n
 n                 = minimum (counts rows)

counts = filter (/=1) . map length . concat

-- | 4. Final algorithm

solve2 :: Grid -> [Grid]
solve2 =  search . choices

search :: Matrix Choices -> [Grid]
search cm
 |not (safe pm)  = []
 |complete pm    = [map (map head) pm]
 |otherwise      = (concat . map search . expand1) pm
 where pm = prune cm

complete :: Matrix Choices -> Bool
complete = all (all single)

single [_] = True
single _   = False

safe :: Matrix Choices -> Bool
safe cm = all ok (rows cm) &&
          all ok (cols cm) &&
          all ok (boxs cm)

ok row = nodups [d | [d] <- row]

-- Q5. solve2는 수도쿠를 빠르게 풀도록 최적화한 함수이다.
-- 
--     solve1 대비 최적화한 방법을 한가지를 1단락 이내로 설명하시오.
--     (solve2에서 사용하는 함수를 모두 이해하지 않아도 됩니다.)
{-

   A5. 

   prune 함수를 통해, 가능한 숫자의 선택지를 줄여 계산을 단순화한다.
   prune 함수는 각 행, 열, 및 3x3 박스 내에서 확정된 숫자를 찾아, 해당 숫자를 같은 행, 열 또는 박스의 다른 셀들에서 제거한다.
   이렇게 가능한 숫자 조합의 수가 감소하고, 탐색해야 할 그리드의 수가 줄어든다.

-}